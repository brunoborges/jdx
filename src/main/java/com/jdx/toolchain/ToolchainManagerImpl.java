package com.jdx.toolchain;

import com.jdx.catalog.JdkCatalogImpl;
import com.jdx.model.JdkInfo;
import com.jdx.model.ProjectConfig;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

/**
 * Implementation of toolchain management for Maven and Gradle.
 */
public class ToolchainManagerImpl implements ToolchainManager {

    @Override
    public void configure(ProjectConfig config) throws IOException {
        if (config.tooling().maven_manage_toolchains()) {
            configureMavenToolchains(config);
        }
        
        if (config.tooling().gradle_manage_toolchain_block()) {
            configureGradleToolchains(config);
        }
    }

    @Override
    public boolean verify(ProjectConfig config) {
        // Simple verification - check if toolchain files exist
        boolean mavenOk = true;
        boolean gradleOk = true;
        
        if (config.tooling().maven_manage_toolchains()) {
            Path toolchainsPath = Paths.get(System.getProperty("user.home"), ".m2", "toolchains.xml");
            mavenOk = Files.exists(toolchainsPath);
        }
        
        if (config.tooling().gradle_manage_toolchain_block()) {
            Path gradlePath = Paths.get("build.gradle");
            Path gradleKtsPath = Paths.get("build.gradle.kts");
            gradleOk = Files.exists(gradlePath) || Files.exists(gradleKtsPath);
        }
        
        return mavenOk && gradleOk;
    }

    private void configureMavenToolchains(ProjectConfig config) throws IOException {
        Path m2Path = Paths.get(System.getProperty("user.home"), ".m2");
        if (!Files.exists(m2Path)) {
            Files.createDirectories(m2Path);
        }

        Path toolchainsPath = m2Path.resolve("toolchains.xml");
        
        // Get all JDKs from catalog
        JdkCatalogImpl catalog = new JdkCatalogImpl();
        List<JdkInfo> jdks = catalog.getAll();
        
        if (jdks.isEmpty()) {
            System.err.println("Warning: No JDKs in catalog. Run 'jdx scan' first.");
            return;
        }

        // Generate toolchains.xml
        StringBuilder xml = new StringBuilder();
        xml.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
        xml.append("<toolchains xmlns=\"http://maven.apache.org/TOOLCHAINS/1.1.0\"\n");
        xml.append("             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n");
        xml.append("             xsi:schemaLocation=\"http://maven.apache.org/TOOLCHAINS/1.1.0 http://maven.apache.org/xsd/toolchains-1.1.0.xsd\">\n");
        xml.append("  <!-- Generated by jdx -->\n");
        
        for (JdkInfo jdk : jdks) {
            if (!jdk.valid()) continue;
            
            xml.append("  <toolchain>\n");
            xml.append("    <type>jdk</type>\n");
            xml.append("    <provides>\n");
            
            // Extract major version
            String version = jdk.version().replaceAll("^\"|\"$", "");
            String majorVersion = extractMajorVersion(version);
            
            xml.append("      <version>").append(majorVersion).append("</version>\n");
            xml.append("      <vendor>").append(jdk.vendor()).append("</vendor>\n");
            xml.append("    </provides>\n");
            xml.append("    <configuration>\n");
            xml.append("      <jdkHome>").append(jdk.path()).append("</jdkHome>\n");
            xml.append("    </configuration>\n");
            xml.append("  </toolchain>\n");
        }
        
        xml.append("</toolchains>\n");
        
        Files.writeString(toolchainsPath, xml.toString());
        System.out.println("Updated Maven toolchains at: " + toolchainsPath);
        
        // Configure pom.xml with maven-toolchains-plugin if pom.xml exists
        configurePomToolchainsPlugin(config);
    }

    private void configureGradleToolchains(ProjectConfig config) throws IOException {
        // Check if build.gradle exists
        Path buildGradle = Paths.get("build.gradle");
        Path buildGradleKts = Paths.get("build.gradle.kts");
        
        boolean hasGradle = Files.exists(buildGradle);
        boolean hasGradleKts = Files.exists(buildGradleKts);
        
        if (!hasGradle && !hasGradleKts) {
            System.out.println("No Gradle build file found, skipping Gradle toolchain configuration.");
            return;
        }

        // Create gradle directory if it doesn't exist
        Path gradleDir = Paths.get("gradle");
        if (!Files.exists(gradleDir)) {
            Files.createDirectories(gradleDir);
        }

        // Create jdx.gradle with toolchain configuration
        Path jdxGradle = gradleDir.resolve("jdx.gradle");
        int releaseVersion = config.project().compile().release();
        
        String gradleScript = String.format("""
            // Generated by jdx
            java {
                toolchain {
                    languageVersion = JavaLanguageVersion.of(%d)
                }
            }
            
            tasks.withType(JavaCompile).configureEach {
                options.release = %d
            }
            """, releaseVersion, releaseVersion);
        
        Files.writeString(jdxGradle, gradleScript);
        System.out.println("Created gradle/jdx.gradle");
        System.out.println("Add 'apply from: \"gradle/jdx.gradle\"' to your settings.gradle");
    }

    private String extractMajorVersion(String version) {
        // Extract major version number
        // "1.8.0_372" -> "8"
        // "17.0.11" -> "17"
        // "21" -> "21"
        
        if (version.startsWith("1.8")) {
            return "8";
        }
        
        String[] parts = version.split("[.\\-_]");
        if (parts.length > 0) {
            return parts[0];
        }
        
        return version;
    }
    
    private void configurePomToolchainsPlugin(ProjectConfig config) throws IOException {
        Path pomPath = Paths.get("pom.xml");
        if (!Files.exists(pomPath)) {
            System.out.println("No pom.xml found, skipping Maven toolchains plugin configuration.");
            return;
        }
        
        String pomContent = Files.readString(pomPath);
        
        // Check if jdx markers already exist
        if (pomContent.contains("<!-- jdx:begin -->") && pomContent.contains("<!-- jdx:end -->")) {
            // Update existing plugin configuration
            pomContent = updateToolchainsPlugin(pomContent, config);
        } else {
            // Add new plugin configuration
            pomContent = addToolchainsPlugin(pomContent, config);
        }
        
        Files.writeString(pomPath, pomContent);
        System.out.println("Updated pom.xml with maven-toolchains-plugin configuration");
    }
    
    private String updateToolchainsPlugin(String pomContent, ProjectConfig config) {
        int compileVersion = config.project().compile().release();
        
        String pluginConfig = String.format("""
            <!-- jdx:begin -->
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-toolchains-plugin</artifactId>
              <version>3.2.0</version>
              <executions>
                <execution>
                  <goals>
                    <goal>toolchain</goal>
                  </goals>
                </execution>
              </executions>
              <configuration>
                <toolchains>
                  <jdk>
                    <version>%d</version>
                  </jdk>
                </toolchains>
              </configuration>
            </plugin>
            <!-- jdx:end -->""", compileVersion);
        
        // Replace content between markers
        int beginIndex = pomContent.indexOf("<!-- jdx:begin -->");
        int endIndex = pomContent.indexOf("<!-- jdx:end -->") + "<!-- jdx:end -->".length();
        
        if (beginIndex >= 0 && endIndex > beginIndex) {
            return pomContent.substring(0, beginIndex) + pluginConfig + pomContent.substring(endIndex);
        }
        
        return pomContent;
    }
    
    private String addToolchainsPlugin(String pomContent, ProjectConfig config) {
        int compileVersion = config.project().compile().release();
        
        String pluginConfig = String.format("""
                <!-- jdx:begin -->
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-toolchains-plugin</artifactId>
                  <version>3.2.0</version>
                  <executions>
                    <execution>
                      <goals>
                        <goal>toolchain</goal>
                      </goals>
                    </execution>
                  </executions>
                  <configuration>
                    <toolchains>
                      <jdk>
                        <version>%d</version>
                      </jdk>
                    </toolchains>
                  </configuration>
                </plugin>
                <!-- jdx:end -->
            """, compileVersion);
        
        // Find <build><plugins> section or create it
        if (pomContent.contains("<build>") && pomContent.contains("<plugins>")) {
            // Insert after <plugins> tag
            int pluginsIndex = pomContent.indexOf("<plugins>");
            if (pluginsIndex >= 0) {
                int insertPoint = pluginsIndex + "<plugins>".length();
                return pomContent.substring(0, insertPoint) + "\n" + pluginConfig + pomContent.substring(insertPoint);
            }
        } else if (pomContent.contains("<build>")) {
            // Insert <plugins> section inside <build>
            int buildIndex = pomContent.indexOf("<build>");
            if (buildIndex >= 0) {
                int insertPoint = buildIndex + "<build>".length();
                String pluginsSection = "\n    <plugins>\n" + pluginConfig + "\n    </plugins>\n  ";
                return pomContent.substring(0, insertPoint) + pluginsSection + pomContent.substring(insertPoint);
            }
        } else {
            // Add <build> section before </project>
            int projectEndIndex = pomContent.lastIndexOf("</project>");
            if (projectEndIndex >= 0) {
                String buildSection = String.format("""
                    
                      <build>
                        <plugins>
                    %s
                        </plugins>
                      </build>
                    
                    """, pluginConfig);
                return pomContent.substring(0, projectEndIndex) + buildSection + pomContent.substring(projectEndIndex);
            }
        }
        
        // If we couldn't insert, print a message
        System.out.println("Could not automatically add maven-toolchains-plugin to pom.xml.");
        System.out.println("Please manually add the following to your <build><plugins> section:");
        System.out.println(pluginConfig);
        
        return pomContent;
    }
}
