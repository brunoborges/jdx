package com.jdx.toolchain;

import com.jdx.catalog.JdkCatalogImpl;
import com.jdx.model.JdkInfo;
import com.jdx.model.ProjectConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;

class ToolchainManagerImplTest {

    @TempDir
    Path tempDir;

    private ToolchainManagerImpl toolchainManager;
    private ProjectConfig testConfig;
    private String originalUserHome;

    @BeforeEach
    void setUp() {
        originalUserHome = System.getProperty("user.home");
        
        // Create a unique subdirectory for each test
        Path testDir = tempDir.resolve("test-" + System.nanoTime());
        try {
            Files.createDirectories(testDir);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        System.setProperty("user.home", testDir.toString());
        
        toolchainManager = new ToolchainManagerImpl();
        testConfig = new ProjectConfig(
            1,
            new ProjectConfig.ProjectSettings(
                new ProjectConfig.RuntimeSettings("21", "any"),
                new ProjectConfig.CompileSettings(17, true)
            ),
            new ProjectConfig.ToolingSettings(true, true, true),
            "Test configuration"
        );
        
        // Create a catalog with test JDKs
        setupTestCatalog();
    }

    @org.junit.jupiter.api.AfterEach
    void tearDown() {
        // Restore original user.home
        if (originalUserHome != null) {
            System.setProperty("user.home", originalUserHome);
        }
    }

    @Test
    void testConfigureMavenToolchains() throws IOException {
        toolchainManager.configure(testConfig);
        
        Path toolchainsPath = tempDir.resolve(".m2/toolchains.xml");
        assertThat(toolchainsPath).exists();
        
        String content = Files.readString(toolchainsPath);
        assertThat(content).contains("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        assertThat(content).contains("<toolchains");
        assertThat(content).contains("<type>jdk</type>");
        assertThat(content).contains("<!-- Generated by jdx -->");
    }

    @Test
    void testToolchainsXmlContainsJdkHome() throws IOException {
        toolchainManager.configure(testConfig);
        
        Path toolchainsPath = tempDir.resolve(".m2/toolchains.xml");
        String content = Files.readString(toolchainsPath);
        
        assertThat(content).contains("<jdkHome>");
        assertThat(content).contains("</jdkHome>");
    }

    @Test
    void testToolchainsXmlContainsVersion() throws IOException {
        toolchainManager.configure(testConfig);
        
        Path toolchainsPath = tempDir.resolve(".m2/toolchains.xml");
        String content = Files.readString(toolchainsPath);
        
        assertThat(content).contains("<version>");
        assertThat(content).contains("</version>");
    }

    @Test
    void testToolchainsXmlContainsVendor() throws IOException {
        toolchainManager.configure(testConfig);
        
        Path toolchainsPath = tempDir.resolve(".m2/toolchains.xml");
        String content = Files.readString(toolchainsPath);
        
        assertThat(content).contains("<vendor>");
        assertThat(content).contains("</vendor>");
    }

    @Test
    void testBackupCreation() throws IOException {
        // Create existing toolchains.xml
        Path m2Dir = tempDir.resolve(".m2");
        Files.createDirectories(m2Dir);
        Path existingToolchains = m2Dir.resolve("toolchains.xml");
        Files.writeString(existingToolchains, "<toolchains>old content</toolchains>");
        
        toolchainManager.configure(testConfig);
        
        // Check that backup was created
        long backupCount = Files.list(m2Dir)
            .filter(p -> p.getFileName().toString().startsWith("toolchains.xml.bak."))
            .count();
        
        assertThat(backupCount).isGreaterThan(0);
    }

    @Test
    void testBackupFileFormat() throws IOException {
        // Create existing toolchains.xml
        Path m2Dir = tempDir.resolve(".m2");
        Files.createDirectories(m2Dir);
        Path existingToolchains = m2Dir.resolve("toolchains.xml");
        Files.writeString(existingToolchains, "<toolchains>old content</toolchains>");
        
        toolchainManager.configure(testConfig);
        
        // Find backup file
        Path backup = Files.list(m2Dir)
            .filter(p -> p.getFileName().toString().startsWith("toolchains.xml.bak."))
            .findFirst()
            .orElseThrow();
        
        String backupContent = Files.readString(backup);
        assertThat(backupContent).isEqualTo("<toolchains>old content</toolchains>");
        
        // Verify backup filename format (should be toolchains.xml.bak.YYYYMMDDHHMMSS)
        String backupName = backup.getFileName().toString();
        assertThat(backupName).matches("toolchains\\.xml\\.bak\\.\\d{14}");
    }

    @Test
    void testVerifyWithExistingToolchains() throws IOException {
        // Create toolchains.xml
        Path m2Dir = tempDir.resolve(".m2");
        Files.createDirectories(m2Dir);
        Files.writeString(m2Dir.resolve("toolchains.xml"), "<toolchains/>");
        
        // Create test config with only Maven enabled
        ProjectConfig mavenOnlyConfig = new ProjectConfig(
            1,
            new ProjectConfig.ProjectSettings(
                new ProjectConfig.RuntimeSettings("21", "any"),
                new ProjectConfig.CompileSettings(17, true)
            ),
            new ProjectConfig.ToolingSettings(true, false, false),
            "Test"
        );
        
        boolean result = toolchainManager.verify(mavenOnlyConfig);
        assertThat(result).isTrue();
    }

    @Test
    void testVerifyWithoutToolchains() {
        boolean result = toolchainManager.verify(testConfig);
        assertThat(result).isFalse();
    }

    @Test
    void testConfigureGradleToolchain() throws IOException {
        // Create a unique test directory for this test
        Path gradleTestDir = tempDir.resolve("gradle-test-" + System.nanoTime());
        Files.createDirectories(gradleTestDir);
        
        // Create build.gradle in that directory
        Path buildGradle = gradleTestDir.resolve("build.gradle");
        Files.writeString(buildGradle, "// build file");
        
        // Set user.home to the test directory so catalog is found there
        System.setProperty("user.home", gradleTestDir.toString());
        
        // Create catalog in the new directory
        JdkCatalogImpl gradleCatalog = new JdkCatalogImpl();
        gradleCatalog.add(new JdkInfo(
            "temurin-17",
            "17.0.9",
            "Eclipse Adoptium",
            "x86_64",
            "/usr/lib/jvm/temurin-17",
            Set.of("jlink"),
            true
        ));
        gradleCatalog.save();
        
        ProjectConfig gradleConfig = new ProjectConfig(
            1,
            new ProjectConfig.ProjectSettings(
                new ProjectConfig.RuntimeSettings("21", "any"),
                new ProjectConfig.CompileSettings(17, true)
            ),
            new ProjectConfig.ToolingSettings(false, true, false),
            "Test"
        );
        
        // Save current directory and change to gradle test directory
        Path originalDir = Path.of(System.getProperty("user.dir"));
        try {
            // Change working directory
            System.setProperty("user.dir", gradleTestDir.toString());
            
            // Now configure - it should find build.gradle in current directory
            ToolchainManagerImpl localManager = new ToolchainManagerImpl();
            localManager.configure(gradleConfig);
            
            Path jdxGradle = gradleTestDir.resolve("gradle/jdx.gradle");
            assertThat(jdxGradle).exists();
            
            String content = Files.readString(jdxGradle);
            assertThat(content).contains("java {");
            assertThat(content).contains("toolchain {");
            assertThat(content).contains("languageVersion = JavaLanguageVersion.of(17)");
            assertThat(content).contains("options.release = 17");
        } finally {
            System.setProperty("user.dir", originalDir.toString());
        }
    }

    @Test
    void testExtractMajorVersionFromStandardFormat() {
        assertThat(extractMajorVersion("21.0.1")).isEqualTo("21");
        assertThat(extractMajorVersion("17.0.9")).isEqualTo("17");
        assertThat(extractMajorVersion("11.0.21")).isEqualTo("11");
    }

    @Test
    void testExtractMajorVersionFromJava8() {
        assertThat(extractMajorVersion("1.8.0_392")).isEqualTo("8");
    }

    @Test
    void testExtractMajorVersionEdgeCases() {
        assertThat(extractMajorVersion("21")).isEqualTo("21");
        assertThat(extractMajorVersion("17-ea")).isEqualTo("17");
    }

    @Test
    void testConfigureWithNoJdksInCatalog() throws IOException {
        // Clear the catalog
        System.setProperty("user.home", tempDir.resolve("empty").toString());
        JdkCatalogImpl emptyCatalog = new JdkCatalogImpl();
        emptyCatalog.save();
        
        // Should handle gracefully
        toolchainManager.configure(testConfig);
    }

    @Test
    void testMavenToolchainsDisabled() throws IOException {
        ProjectConfig noMavenConfig = new ProjectConfig(
            1,
            new ProjectConfig.ProjectSettings(
                new ProjectConfig.RuntimeSettings("21", "any"),
                new ProjectConfig.CompileSettings(17, true)
            ),
            new ProjectConfig.ToolingSettings(false, false, false),
            "Test"
        );
        
        toolchainManager.configure(noMavenConfig);
        
        Path toolchainsPath = tempDir.resolve(".m2/toolchains.xml");
        assertThat(toolchainsPath).doesNotExist();
    }

    private String extractMajorVersion(String version) {
        if (version.startsWith("1.8")) {
            return "8";
        }
        String[] parts = version.split("[.\\-_]");
        if (parts.length > 0) {
            return parts[0];
        }
        return version;
    }

    private void setupTestCatalog() {
        JdkCatalogImpl catalog = new JdkCatalogImpl();
        
        catalog.add(new JdkInfo(
            "temurin-21",
            "21.0.1",
            "Eclipse Adoptium",
            "x86_64",
            "/usr/lib/jvm/temurin-21",
            Set.of("jlink"),
            true
        ));
        
        catalog.add(new JdkInfo(
            "temurin-17",
            "17.0.9",
            "Eclipse Adoptium",
            "x86_64",
            "/usr/lib/jvm/temurin-17",
            Set.of("jlink"),
            true
        ));
        
        catalog.save();
    }
}
